# WordPress single site rules.
# Designed to be included in any server {} block.

include global/restrictions.conf;

# This order might seem weird - this is attempted to match last if rules below fail.
# http://wiki.nginx.org/HttpCoreModule
location / {
    try_files $uri $uri/ /index.php?$args;
}

# Add trailing slash to */wp-admin requests.
rewrite /wp-admin$ $scheme://$host$uri/ permanent;

# Pass all .php files onto a php-fpm/php-fcgi server.
location ~ [^/]\.php(/|$) {

    # Drop no cache cookie if need be
    # (for some reason, add_header fails if included in prior if-block)
    if ($no_cache = "1") {
        add_header Set-Cookie "_wpnc=1; Max-Age=2; Path=/";
        add_header X-Nginx-Cache "0";
    }

    # Bypass cache if no-cache cookie is set
    if ($http_cookie ~* "_wpnc") {
        set $no_cache "1";
    }

    # Bypass cache if flag is set
    fastcgi_no_cache $no_cache;
    fastcgi_cache_bypass $no_cache;

    fastcgi_cache wordpress;
    fastcgi_cache_valid 404 30s;
    fastcgi_cache_valid 200 5s;
    fastcgi_max_temp_file_size 1M;

    # Use stale cache items while updating in the background
    fastcgi_cache_use_stale updating error timeout invalid_header http_500;
    fastcgi_cache_lock on;
    fastcgi_cache_lock_timeout 5s;

    fastcgi_read_timeout 300;
    fastcgi_buffers 8 256k;
    fastcgi_buffer_size 128k;
    fastcgi_intercept_errors on;
            
    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
    if (!-f $document_root$fastcgi_script_name) {
        return 404;
    }
    # This is a robust solution for path info security issue and works with "cgi.fix_pathinfo = 1" in /etc/php.ini (default)

    if ($no_cache = "") {
        add_header X-Nginx-Cache $upstream_cache_status;
    }

    # Ignore headers set by WordPress
    fastcgi_ignore_headers Cache-Control Expires;
    
    include fastcgi_params;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_pass wordpress:9000;
}